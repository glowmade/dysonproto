// -= GLOWMADE CUSTOM FLATC =-
// automatically generated by the FlatBuffers compiler, do not modify

package dyson

import (
	flatbuffers "github.com/glowmade/flatbuffers/go"
)

type FlatLog struct {
	_tab flatbuffers.Table
}

// FlatLogTypeHash is hash value computed from the type name
var FlatLogTypeHash uint32 = 0x2E3645D6

// FlatLogTypeFourCC is a 4-byte identifier using the name capitals and TypeHash-based filler
var FlatLogTypeFourCC string = "_:FL"

func (rcv *FlatLog) TypeHash() uint32 {
	return FlatLogTypeHash
}

func (rcv *FlatLog) TypeFourCC() string {
	return FlatLogTypeFourCC
}

func GetRootAsFlatLog(buf []byte, offset flatbuffers.UOffsetT) *FlatLog {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &FlatLog{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *FlatLog) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *FlatLog) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *FlatLog) TablePtr() *flatbuffers.Table {
	return &rcv._tab
}

func (rcv *FlatLog) Level() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FlatLog) MutateLevel(n byte) bool {
	return rcv._tab.MutateByteSlot(4, n)
}

func (rcv *FlatLog) Ts() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FlatLog) MutateTs(n uint64) bool {
	return rcv._tab.MutateUint64Slot(6, n)
}

func (rcv *FlatLog) Message() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *FlatLog) Fields(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *FlatLog) FieldsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *FlatLog) Origin() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *FlatLog) Context() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *FlatLog) Stack() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func FlatLogStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func FlatLogAddLevel(builder *flatbuffers.Builder, level byte) {
	builder.PrependByteSlot(0, level, 0)
}
func FlatLogAddTs(builder *flatbuffers.Builder, ts uint64) {
	builder.PrependUint64Slot(1, ts, 0)
}
func FlatLogAddMessage(builder *flatbuffers.Builder, message flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(message), 0)
}
func FlatLogAddFields(builder *flatbuffers.Builder, fields flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(fields), 0)
}
func FlatLogStartFieldsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func FlatLogAddOrigin(builder *flatbuffers.Builder, origin flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(origin), 0)
}
func FlatLogAddContext(builder *flatbuffers.Builder, context flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(context), 0)
}
func FlatLogAddStack(builder *flatbuffers.Builder, stack flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(stack), 0)
}
func FlatLogEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
